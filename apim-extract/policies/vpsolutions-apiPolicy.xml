<!--
    IMPORTANT:
    - Policy elements can appear only within the <inbound>, <outbound>, <backend> section elements.
    - To apply a policy to the incoming request (before it is forwarded to the backend service), place a corresponding policy element within the <inbound> section element.
    - To apply a policy to the outgoing response (before it is sent back to the caller), place a corresponding policy element within the <outbound> section element.
    - To add a policy, place the cursor at the desired insertion point and select a policy from the sidebar.
    - To remove a policy, delete the corresponding policy statement from the policy document.
    - Position the <base> element within a section element to inherit all policies from the corresponding section element in the enclosing scope.
    - Remove the <base> element to prevent inheriting policies from the corresponding section element in the enclosing scope.
    - Policies are applied in the order of their appearance, from the top down.
    - Comments within policy elements are not supported and may disappear. Place your comments between policy elements or at a higher level scope.
-->
<policies>
	<!-- 
    - obtain keyvault secret for vps password 
    - transform response to string
    - use kv variable to get the token from vps
    - save vps token in cache for 12 hours -->
	<inbound>
		<base />
		<cache-lookup-value key="vps-token" variable-name="tokenVps" />
		<choose>
			<when condition="@(!context.Variables.ContainsKey("tokenVps"))">
				<send-request mode="new" response-variable-name="secretResponse" timeout="20" ignore-error="false">
					<set-url>https://mt-d-eun-ipaas-kv.vault.azure.net/secrets/vps-password?api-version=7.0</set-url>
					<set-method>GET</set-method>
					<authentication-managed-identity resource="https://vault.azure.net" />
				</send-request>
				<set-variable name="vpsPw" value="@{
                var secret = ((IResponse)context.Variables["secretResponse"]).Body.As<JObject>();
                return secret["value"].ToString();}" />
				<send-request ignore-error="true" timeout="20" response-variable-name="bearerToken" mode="new">
					<set-url>https://performance.vpsolutions.dk/Token</set-url>
					<set-method>POST</set-method>
					<set-header name="Content-Type" exists-action="override">
						<value>application/x-www-form-urlencoded</value>
					</set-header>
					<set-body>@{
                        var pw = (string)context.Variables["vpsPw"];
                        return "grant_type=password&username=IMOS.Fueltable@maersktankers.com&password=" + pw;
                        }</set-body>
				</send-request>
				<set-variable name="tokenVps" value="@((string)((IResponse)context.Variables["bearerToken"]).Body.As<JObject>()["access_token"])" />
				<cache-store-value key="vps-token" value="@((string)context.Variables["tokenVps"])" duration="43200" />
			</when>
		</choose>
	</inbound>
	<backend>
		<base />
	</backend>
	<outbound>
		<base />
	</outbound>
	<on-error>
		<base />
	</on-error>
</policies>